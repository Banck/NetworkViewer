//
//  BodyViewerScreen.swift
//
//  Created Sakhabaev Egor on 10.11.2023.
//  Copyright Â© 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Sakhabaev Egor @Banck
//  https://github.com/Banck/SwiftUI-MVVM-Coordinator-template
//

import SwiftUI

struct BodyViewerScreen: View, BodyViewerView {

    enum TextDisplayStyle: String, CaseIterable, Identifiable {

        var id: Self {
            self
        }

        case json   = "JSON"
        case raw    = "RAW"
    }

    @StateObject var viewModel: BodyViewerViewModel
    @State private var textDisplayStyle: TextDisplayStyle = .json
    @State private var isShowingFindNavigator = false

    var body: some View {
        VStack {
            Picker("", selection: $textDisplayStyle) {
                ForEach(TextDisplayStyle.allCases) {
                    Text($0.rawValue)
                }
            }
            .pickerStyle(.segmented)
            contentForStyle(textDisplayStyle)
        }
        .padding([.leading, .trailing], 16)
        .toolbar {
            if #available(iOS 16.0, *) {
                Button {
                    textDisplayStyle = .raw
                    // Hack to avoid bug with FindNavigator when TextEditor not always visibles
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.01) {
                        textDisplayStyle = .json
                        textDisplayStyle = .raw
                        isShowingFindNavigator.toggle()
                    }
                } label: {
                    Image(systemName: "magnifyingglass")
                }
                ShareLink(items: [viewModel.text]) {
                    Image(systemName: "square.and.arrow.up")
                }
            }
        }
        .onAppear {
            viewModel.viewWillAppear()
        }
        .viFindNavigator(isPresented: $isShowingFindNavigator)
    }

    @ViewBuilder
    func contentForStyle(_ style: TextDisplayStyle) -> some View {
        switch style {
        case .json:
            DebugJsonView(viewModel.text)
        case .raw:
            TextEditor(text: .constant(viewModel.text))
                .font(.system(size: 13))
                .ignoresSafeArea(.container, edges: .bottom)
        }
    }
}

#Preview {
    let jsonData = """
{
    "glossary": {
        "title": "example glossary",
        "GlossDiv": {
            "title": "S",
            "GlossList": {
                "GlossEntry": {
                    "ID": "SGML",
                    "SortAs": "SGML",
                    "GlossTerm": "Standard Generalized Markup Language",
                    "Acronym": "SGML",
                    "Abbrev": "ISO 8879:1986",
                    "GlossDef": {
                        "para": "A meta-markup language, used to create markup languages such as DocBook.",
                        "GlossSeeAlso": ["GML", "XML"]
                    },
                    "GlossSee": "markup"
                }
            }
        }
    }
}
"""
        .data(using: .utf8)
    let module = BodyViewerConfigurator.createModule(data: jsonData ?? .init())
    return NavigationView {
        module.view
    }
}
