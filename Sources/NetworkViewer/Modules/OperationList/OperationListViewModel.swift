//
//  OperationListViewModel.swift
//
//  Created Sakhabaev Egor on 10.11.2023.
//  Copyright Â© 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Sakhabaev Egor @Banck
//  https://github.com/Banck/SwiftUI-MVVM-Coordinator-template
//

import Foundation

class OperationListViewModel: OperationListViewModelInterface, ObservableObject {

    private var output: OperationListModuleOutput?
    private let operations: [NetworkViewer.Operation]
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm:ss"
        return formatter
    }()
    private var numberFormatter: NumberFormatter = {
        let formatter = NumberFormatter()
        formatter.numberStyle = NumberFormatter.Style.decimal
        formatter.maximumFractionDigits = 2
        formatter.decimalSeparator = "."
        return formatter
    }()
    private lazy var domain: String = {
        URL(string: operations.first?.request.url ?? "")?.host ?? ""
    }()

    var title: String {
        domain
    }
    @Published var operationsData: [OperationRow.Data] = []
    @Published var isFavorite: Bool = false

    init(
        operations: [NetworkViewer.Operation],
        output: OperationListModuleOutput? = nil
    ) {
        self.operations = operations.sorted {
            $0.startAt > $1.startAt
        }
        self.output = output
        prepareOperations()
    }

    func operation(forId id: String) -> NetworkViewer.Operation? {
        operations.first { $0.id == id }
    }

    func toggleFavorite() {
        NetworkViewer.favoriteService.toggleFavorite(for: domain)
        isFavorite = NetworkViewer.favoriteService.isFavorite(domain)
    }

    // MARK: - Lifecycle -
    func viewWillAppear() {
        isFavorite = NetworkViewer.favoriteService.isFavorite(domain)
    }
}

// MARK: - Private methods
private extension OperationListViewModel {

    func prepareOperations() {
        operationsData = operations.map {
            let statusCode = HTTPStatusCode(rawValue: $0.response?.statusCode ?? 0)
            let startDate = Date(timeIntervalSince1970: $0.startAt)
            var status = "Unknown"
            if let statusCode {
                status = "\(statusCode.rawValue) " + statusCode.description
            }
            var duration: String?
            if let endAt = $0.endAt {
                let endDate = Date(timeIntervalSince1970: endAt)
                let timeInterval = endDate.timeIntervalSince(startDate)
                if timeInterval > 60 {
                    numberFormatter.positiveSuffix = " min"
                    numberFormatter.maximumFractionDigits = 2
                    duration = numberFormatter.string(for: timeInterval / 60)
                }
                if timeInterval > 1 {
                    numberFormatter.positiveSuffix = " sec"
                    numberFormatter.maximumFractionDigits = 2
                    duration = numberFormatter.string(for: timeInterval)
                } else {
                    numberFormatter.maximumFractionDigits = 0
                    numberFormatter.positiveSuffix = " ms"
                    duration = numberFormatter.string(for: timeInterval * 1000)
                }
            }
            return OperationRow.Data(
                id: $0.id,
                success: (200...299).contains(statusCode?.rawValue ?? 0),
                method: $0.request.method,
                status: status,
                date: dateFormatter.string(from: Date(timeIntervalSince1970: $0.startAt)),
                duration: duration,
                url: $0.request.url
            )
        }
    }
}

// MARK: - OperationListModuleInput
extension OperationListViewModel: OperationListModuleInput { }
